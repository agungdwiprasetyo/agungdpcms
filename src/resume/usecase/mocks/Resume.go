// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "github.com/agungdwiprasetyo/agungdpcms/src/resume/domain"
import filter "github.com/agungdwiprasetyo/agungdpcms/shared/filter"
import mock "github.com/stretchr/testify/mock"
import shared "github.com/agungdwiprasetyo/agungdpcms/shared"

// Resume is an autogenerated mock type for the Resume type
type Resume struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: _a0
func (_m *Resume) FindAll(_a0 *filter.Filter) shared.Result {
	ret := _m.Called(_a0)

	var r0 shared.Result
	if rf, ok := ret.Get(0).(func(*filter.Filter) shared.Result); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(shared.Result)
	}

	return r0
}

// FindBySlug provides a mock function with given fields: slug
func (_m *Resume) FindBySlug(slug string) shared.Result {
	ret := _m.Called(slug)

	var r0 shared.Result
	if rf, ok := ret.Get(0).(func(string) shared.Result); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Get(0).(shared.Result)
	}

	return r0
}

// RemoveAchievement provides a mock function with given fields: id
func (_m *Resume) RemoveAchievement(id int) shared.Result {
	ret := _m.Called(id)

	var r0 shared.Result
	if rf, ok := ret.Get(0).(func(int) shared.Result); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(shared.Result)
	}

	return r0
}

// RemoveExperience provides a mock function with given fields: id
func (_m *Resume) RemoveExperience(id int) shared.Result {
	ret := _m.Called(id)

	var r0 shared.Result
	if rf, ok := ret.Get(0).(func(int) shared.Result); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(shared.Result)
	}

	return r0
}

// RemoveSkill provides a mock function with given fields: id
func (_m *Resume) RemoveSkill(id int) shared.Result {
	ret := _m.Called(id)

	var r0 shared.Result
	if rf, ok := ret.Get(0).(func(int) shared.Result); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(shared.Result)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *Resume) Save(_a0 *domain.Resume) shared.Result {
	ret := _m.Called(_a0)

	var r0 shared.Result
	if rf, ok := ret.Get(0).(func(*domain.Resume) shared.Result); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(shared.Result)
	}

	return r0
}
