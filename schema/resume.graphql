################### Resume Module Area
type ResumeQuery {
    getAllResume(filter: Filter!): Resumes
    getResumeBySlug(slug: String!): Resume
}
type ResumeMutation {
    createResume(resume: ResumeInput!): Resume
    remove(achievementID: Int, experienceID: Int, skillID: Int): String!
}

type Resume {
    id: ID!
    slug: String!
    name: String!
    profile: Profile
    achievements: [Achievement]!
    experiences: [Experience]!
    skills: [Skill]!
}
type Resumes {
    meta: Meta
    data: [Resume]!
}
input ResumeInput {
    slug: String!
    name: String!
    profile: ProfileInput!
    achievements: [AchievementInput]!
    experiences: [ExperienceInput]!
    skills: [SkillInput]!
}

type Profile {
    id: Int!
    resume_id: Int!
    fullName: String!
    religion: String!
	hobby: String!
	github: String!
	linkedin: String!
	instagram: String!
	facebook: String!
}
input ProfileInput {
    fullName: String!
    religion: String!
	hobby: String!
	github: String!
	linkedin: String!
	instagram: String!
	facebook: String!
}

type Achievement {
    id: Int!
    resume_id: Int!
    name: String!
    appreciator: String!
    year: Int!
    picture: String!
}
input AchievementInput {
    name: String!
    appreciator: String!
    year: Int!
    picture: String!
}
type Achievements {
    meta: Meta!
    data: [Achievement]!
}

type Experience {
    id: Int!
    resumeId: Int!
    title: String!
    company: String!
    location: String!
    startDate: Time!
    endDate: Time!
}
input ExperienceInput {
    title: String!
    company: String!
    location: String!
    startDate: Time!
    endDate: Time!
}
type Experiences {
    meta: Meta!
    data: [Experience]!
}

type Skill {
    id: Int!
    resumeId: Int!
    type: String!
    name: String!
    description: String!
    percentage: Float!
}
input SkillInput {
    type: String!
    name: String!
    description: String!
    percentage: Float!
}
type Skills {
    meta: Meta!
    data: [Skill]!
}
################### End of Resume Module Area